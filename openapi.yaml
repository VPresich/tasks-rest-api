openapi: 3.0.0
info:
  title: API for Phone Book application
  version: 1.0.0
  description: REST API for managing users and contacts in Phone Book application
servers:
  - url: http://localhost:3000/api
paths:
  /users/register:
    post:
      summary: User Registration
      description: Register a new user using name, email, and password.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                  description: "User's name"
                email:
                  type: string
                  example: "user@example.com"
                  description: "User's email address"
                password:
                  type: string
                  example: "yourpassword"
                  description: "User's password"
      responses:
        201:
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      avatarURL:
                        type: string
        409:
          description: Email already in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email in use"

  /users/login:
    post:
      summary: User Login
      description: User login using email and password.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                  description: "User's email address"
                password:
                  type: string
                  example: "yourpassword"
                  description: "User's password"
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      avatarURL:
                        type: string
        401:
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or password is wrong"
        403:
          description: Account not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Your account is not verified"

  /users/logout:
    post:
      summary: Log out
      description: Log out the current user
      responses:
        '200':
          description: User logged out successfully

  /users/current:
    get:
      summary: Get current user
      description: Retrieve information about the currently logged-in user
      responses:
        '200':
          description: Current user retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  email:
                    type: string
                  subscription:
                    type: string
                  avatarURL:
                    type: string

  /users/avatars:
    patch:
      summary: Update user avatar
      description: Update the avatar of the current user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: User avatar updated successfully

  /contacts:
    get:
      summary: Get contacts
      description: Retrieve a list of contacts with optional filters
      parameters:
        - name: favorite
          in: query
          description: Filter contacts by favorite status
          schema:
            type: boolean
        - name: name
          in: query
          description: Filter contacts by name
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: List of contacts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '404':
          description: Contacts not found

    post:
      summary: Add a new contact
      description: Add a new contact to the collection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        '201':
          description: New contact added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'

  /contacts/{contactId}:
    get:
      summary: Get contact by ID
      description: Retrieve a contact by its ID
      parameters:
        - name: contactId
          in: path
          description: ID of the contact to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contact retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '404':
          description: Contact not found

    put:
      summary: Update contact by ID
      description: Update a contact by its ID
      parameters:
        - name: contactId
          in: path
          description: ID of the contact to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        '200':
          description: Contact updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '404':
          description: Contact not found

    delete:
      summary: Delete contact by ID
      description: Delete a contact by its ID
      parameters:
        - name: contactId
          in: path
          description: ID of the contact to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contact deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '404':
          description: Contact not found

  /contacts/{contactId}/favorite:
    patch:
      summary: Update contact favorite status
      description: Update the favorite status of a contact by its ID
      parameters:
        - name: contactId
          in: path
          description: ID of the contact to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                favorite:
                  type: boolean
      responses:
        '200':
          description: Favorite status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '404':
          description: Contact not found

components:
  schemas:
    Contact:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        favorite:
          type: boolean
      required:
        - name