{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.2",
    "title": "API for React Task Pro application",
    "description": "REST API for managing users, boards, columns, tasks in React Task Pro application",
    "license": {
      "name": "GoIt - Final project",
      "url": "https://github.com/VPresich/react-task-pro"
    }
  },
  "consumes": ["multipart/form-data", "application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "http://localhost:3000/api" }],
  "tags": [
    {
      "name": "Users",
      "description": "Users authorization endpoints. Register a new user using name, email, and password."
    },
    {
      "name": "Boards",
      "description": "Create, delete, "
    },
    {
      "name": "Columns",
      "description": "Create, delete, "
    },
    {
      "name": "Tasks",
      "description": "Create, delete, "
    },
    {
      "name": "Support",
      "description": "Create, delete, "
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful registration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponce"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Email in use",
            "content": {}
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "User login credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponce"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "'Email or password is wrong'",
            "content": {}
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "User logout",

        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update information",
          "required": true,
          "content": {
            "application/json": {
              "email": {
                "$ref": "#/components/schemas/UserRegistration/properties/email"
              },
              "password": {
                "$ref": "#/components/schemas/UserRegistration/properties/password"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful logout",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Refresh user by tocken",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful refresh",
            "content": {}
          }
        }
      }
    },
    "/users/avatar": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user avatar Url",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successful registration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "avatarUrl": "User's avatar"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/users/avatars": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update avatar of current user",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update avatar",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAvatarRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "avatarUrl": "User's avatar"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/users": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update user information",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update information",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAvatarRequest"
              },
              "name": {
                "$ref": "#/components/schemas/UserRegistration/properties/name"
              },
              "email": {
                "$ref": "#/components/schemas/UserRegistration/properties/email"
              },
              "password": {
                "$ref": "#/components/schemas/UserRegistration/properties/password"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/users/themes": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update user theme",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update theme",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "theme": "User's theme"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "avatarUrl": "User's avatar"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },

    "/boards": {
      "get": {
        "tags": ["Boards"],
        "summary": "Get all boards",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Board"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      },
      "post": {
        "summary": "Create a new board",
        "description": "Create a new board and assign the current user as the owner.",
        "tags": ["Boards"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "My New Board"
                  },
                  "background": {
                    "type": "string",
                    "example": "blue"
                  },
                  "icon": {
                    "type": "string",
                    "example": "star"
                  }
                },
                "required": ["title"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Board successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "60d5ec49f68a4b8b8c1b5c8e"
                    },
                    "title": {
                      "type": "string",
                      "example": "My New Board"
                    },
                    "background": {
                      "type": "string",
                      "example": "blue"
                    },
                    "icon": {
                      "type": "string",
                      "example": "star"
                    },
                    "owner": {
                      "type": "string",
                      "example": "60d5ec49f68a4b8b8c1b5c8e"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-06-13T03:56:05.574Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-06-13T03:56:05.574Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid input data"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/boards/{id}": {
      "get": {
        "summary": "Get a board by its ID",
        "description": "Retrieve detailed information about a specific board by its ID.",
        "tags": ["Boards"],

        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the board to retrieve.",
            "schema": {
              "type": "string",
              "example": "60d5ec49f68a4b8b8c1b5c8e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved board details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Board"
                }
              }
            }
          }
        },
        "404": {
          "description": "Board not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Board not found"
                  }
                }
              }
            }
          }
        }
      }
    },

    "/boards/{id}/columns": {
      "get": {
        "summary": "Get all columns for a board",
        "description": "Retrieve all columns associated with a specific board by its ID.",
        "tags": ["Columns"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the board to retrieve columns for.",
            "schema": {
              "type": "string",
              "example": "60d5ec49f68a4b8b8c1b5c8e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved columns for the board",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "60d5ec49f68a4b8b8c1b5c8e"
                      },
                      "title": {
                        "type": "string",
                        "example": "Column Title"
                      },
                      "board": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "666a6dd560dcc0c6c2d0f2f2"
                          },
                          "title": {
                            "type": "string",
                            "example": "Board Title"
                          },
                          "background": {
                            "type": "string",
                            "example": "111111"
                          }
                        }
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-06-13T03:56:05.574Z"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-06-13T03:56:05.574Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Board not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Board not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },

      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          }
        }
      },

      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Access token"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },

      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar URL"
          },
          "theme": {
            "type": "string",
            "description": "User's theme"
          }
        }
      },

      "securitySchemes": {
        "Bearer": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      },

      "UpdateAvatarRequest": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "User's avatar file"
          }
        },
        "required": ["avatar"]
      },

      "Board": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the board"
          },
          "title": {
            "type": "string",
            "description": "Title of the board"
          },
          "background": {
            "type": "string",
            "description": "Url of background image"
          },
          "icon": {
            "type": "string",
            "description": "icon id in the spright"
          },

          "owner": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the owner"
              },
              "name": {
                "type": "string",
                "description": "Name of the owner"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Email of the owner"
              },
              "avatarUrl": {
                "type": "string",
                "description": "URL of the owner's avatar"
              },
              "theme": {
                "type": "string",
                "theme": "User theme"
              }
            },
            "description": "Information about the owner of the board"
          }
        }
      }
    }
  }
}
